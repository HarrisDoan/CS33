/* 
 * CS:APP Data Lab 
 * 
 * <Please put your name and userid here>
 * Harris Doan, UID: 605317270 
 * bits.c - Source file with your solutions to the Lab.
 *          This is the file you will hand in to your instructor.
 *
 * WARNING: Do not include the <stdio.h> header; it confuses the dlc
 * compiler. You can still use printf for debugging without including
 * <stdio.h>, although you might get a compiler warning. In general,
 * it's not good practice to ignore compiler warnings, but in this
 * case it's OK.  
 */

#if 0
/*
 * Instructions to Students:
 *
 * STEP 1: Read the following instructions carefully.
 */

You will provide your solution to the Data Lab by
editing the collection of functions in this source file.

INTEGER CODING RULES:
 
  Replace the "return" statement in each function with one
  or more lines of C code that implements the function. Your code 
  must conform to the following style:
 
  int Funct(arg1, arg2, ...) {
      /* brief description of how your implementation works */
      int var1 = Expr1;
      ...
      int varM = ExprM;

      varJ = ExprJ;
      ...
      varN = ExprN;
      return ExprR;
  }

  Each "Expr" is an expression using ONLY the following:
  1. Integer constants 0 through 255 (0xFF), inclusive. You are
      not allowed to use big constants such as 0xffffffff.
  2. Function arguments and local variables (no global variables).
  3. Unary integer operations ! ~
  4. Binary integer operations & ^ | + << >>
    
  Some of the problems restrict the set of allowed operators even further.
  Each "Expr" may consist of multiple operators. You are not restricted to
  one operator per line.

  You are expressly forbidden to:
  1. Use any control constructs such as if, do, while, for, switch, etc.
  2. Define or use any macros.
  3. Define any additional functions in this file.
  4. Call any functions.
  5. Use any other operations, such as &&, ||, -, or ?:
  6. Use any form of casting.
  7. Use any data type other than int.  This implies that you
     cannot use arrays, structs, or unions.

 
  You may assume that your machine:
  1. Uses 2s complement, 32-bit representations of integers.
  2. Performs right shifts arithmetically.
  3. Has unpredictable behavior when shifting if the shift amount
     is less than 0 or greater than 31.


EXAMPLES OF ACCEPTABLE CODING STYLE:
  /*
   * pow2plus1 - returns 2^x + 1, where 0 <= x <= 31
   */
  int pow2plus1(int x) {
     /* exploit ability of shifts to compute powers of 2 */
     return (1 << x) + 1;
  }

  /*
   * pow2plus4 - returns 2^x + 4, where 0 <= x <= 31
   */
  int pow2plus4(int x) {
     /* exploit ability of shifts to compute powers of 2 */
     int result = (1 << x);
     result += 4;
     return result;
  }


NOTES:
  1. Our checker requires that you do NOT define a variable after 
     a statement that does not define a variable.

     For example, this is NOT allowed:

     int illegal_function_for_this_lab(int x, int y) {
      // this statement doesn't define a variable
      x = x + y + 1;
      
      // The checker for this lab does NOT allow the following statement,
      // because this variable definition comes after a statement 
      // that doesn't define a variable
      int z;

      return 0;
     }
     
  2. VERY IMPORTANT: Use the dlc (data lab checker) compiler (described in the handout)
     to check the legality of your solutions.
  3. Each function has a maximum number of operations (integer, logical,
     or comparison) that you are allowed to use for your implementation
     of the function.  The max operator count is checked by dlc.
     Note that assignment ('=') is not counted; you may use as many of
     these as you want without penalty.
  4. Use the btest to check your functions for correctness.
  5. The maximum number of ops for each function is given in the
     header comment for each function. 

/*
 * STEP 2: Modify the following functions according the coding rules.
 * 
 *   IMPORTANT. TO AVOID GRADING SURPRISES:
 *   1. Use the dlc compiler to check that your solutions conform
 *      to the coding rules.
 *   2. Use the btest to verify that your solutions produce 
 *      the correct answers.
 */


#endif
/* Copyright (C) 1991-2012 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */
/* This header is separate from features.h so that the compiler can
   include it implicitly at the start of every compilation.  It must
   not itself include <features.h> or any other header that includes
   <features.h> because the implicit include comes before any feature
   test macros that may be defined in a source file before it first
   explicitly includes a system header.  GCC knows the name of this
   header in order to preinclude it.  */
/* We do support the IEC 559 math functionality, real and complex.  */
/* wchar_t uses ISO/IEC 10646 (2nd ed., published 2011-03-15) /
   Unicode 6.0.  */
/* We do not support C11 <threads.h>.  */

//1
/*
 * isTmax - returns 1 if x is the maximum, two's complement number,
 *     and 0 otherwise 
 *   Legal ops: ! ~ & ^ | +
 *   Max ops: 10
 *   Rating: 1
 */

			     /*
The XOR of the same number will result in the value of 0. Taking the logical NOT means if the value inside is not 0 then it returns 0 (false) and if ths value inside is 0 then it returns 1. For the value TMax, which is represented as 0111 1111 1111 1111 1111 1111 1111 1111 -> adding 1 to this causes overflow and it results in 0. TMax + 1 results in TMin. Using XOR, the compliment of TMax which flips all the bits results in 1000 0000 0000 0000 0000 0000 0000 0000. This is TMin. So XOR the same two values will result in 0. The logical NOT then makes this value 1, since it is true that the value within the paranth is 0. I then AND this with the logical NOT of x twice. If the value of X is actually TMax -> the complement would be TMin. TMin is not zero. Therefore the logical NOT is then 0. Then the logical NOT of 0 is true so its 1. 1 AND with 1 is 1. This will only occur in the case of TMax. When a value like 0 or -1 which are edge cases appear, the !!(~x) helps to check for the validity of this value. Since if it is 0, then the !! of 0 would be 0. The AND with 0 is 0. For the case of -1 (which is all 1's in 32 bit 2's), the !(x + 1 ^ ~x) will take care of that certain edge case.
			      */
int isTmax(int x) {
       int TMax_check = !( (x+1) ^ (~x) );
       int edge_check = !!(~x);
       return TMax_check & edge_check;
}


//2
/* 
 * evenBits - return word with all even-numbered bits set to 1
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 8
 *   Rating: 1
 */

/*
Since we are only limited to 0x00 - 0xFF, the best thing to do is just shift the bit pattern 0101 to the left until we achieve the full 32-bit representation of 0x55555555
 */
int evenBits(void) {
  int byte = 0x55;
  byte = (byte << 8) | byte;
  byte = (byte << 16) | byte;
  return byte;
}



//3
/* 
 * isEqual - return 1 if x == y, and 0 otherwise 
 *   Examples: isEqual(5,5) = 1, isEqual(4,5) = 0
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 5
 *   Rating: 2
 */

/*
Similar to what I did in Problem 1. The XOR of two equivalent values will be 0. So the logical NOT would result in 1, ONLY if the values x and y are equal.
 */
int isEqual(int x, int y) {
  return !(x ^ y);
}


//4
/* 
 * fitsBits - return 1 if x can be represented as an 
 *  n-bit, two's complement integer.
 *   1 <= n <= 32
 *   Examples: fitsBits(5,3) = 0, fitsBits(-4,3) = 1
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 15
 *   Rating: 2
 */
// Since integers are 32-bits, we can determine the amount of bit shifting needed by subtracting the value n from 32. Since this is twos's complement, we can take the complement of n and add 1. And then add this to the shifts. This would give us the amount of neccessary shifts needed to determine whether or not our number can be represented with n bits. Now to determine that part, we then shift x by the shift amount which allows for the proper sign extension  and than XOR them. If it was the same == possible representation then the XOR would equate to 0. The logical NOT of 0 is then 1. This is similar to how we did #1 and #3.
int fitsBits(int x, int n) {
  int shifts;
  int bits;
  shifts = 32 + (~n + 1);
  bits = (x << shifts) >> shifts;
  return !(x ^ bits);
}


//5
/* 
 * conditional - same as x ? y : z 
 *   Example: conditional(2,4,5) = 4
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 16
 *   Rating: 3
 */
// We know for a ternary operation that there are two cases: when x is 0 or when is not 0. The conditional factor being either 0 or TMin. When x is 0, then our conditional is 0. If our x is not zero, then our conditional is TMin. So we can call a int variable called conditional and add together the logical NOT of x (since the values of x we are interested in are 0 or 1) and the complement of 0x00. Then using an OR operator which picks one or the other based on 0 or 1 if we examine OR truth table. But withiin this OR the comparison would be between the conditional factor AND with y and the complement of the conditional factor AND with z, since those are the two values we're branching on. 

int conditional(int x, int y, int z) {
  int conditional;
  int result;
  conditional = !x + ~0x00; 
  result = (conditional & y) | (~conditional & z);
  return result;
}


//6
/* 
 * isGreater - if x > y  then return 1, else return 0 
 *   Example: isGreater(4,5) = 0, isGreater(5,4) = 1
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 24
 *   Rating: 3
 */
int isGreater(int x, int y) {
  int result; 
  int x_signbit;
  int y_signbit;
  int difference;
  int diff_signbit;
  int overflow;

  x_signbit = x >> 31;
  y_signbit = y >> 31;
 
  difference = y + ~x + 1;
  diff_signbit = difference >> 31;

  overflow = (x_signbit & ~y_signbit & diff_signbit) | (~x_signbit & y_signbit & ~diff_signbit);

  result = ( (!x_signbit) & y_signbit) | !!( (!overflow) & diff_signbit);

  return result;
}



//7
/*
 * multFiveEighths - multiplies by 5/8 rounding toward 0.
 *   Should exactly duplicate effect of C expression (x*5/8),
 *   including overflow behavior.
 *   Examples: multFiveEighths(77) = 48
 *             multFiveEighths(-22) = -13
 *             multFiveEighths(1073741824) = 13421728 (overflow)
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 12
 *   Rating: 3
 */
//Same as DataLab0
int multFiveEighths(int x) {
  int result;
  int bias;
  result = x + x + x + x + x;
  bias = (result >> 31) & 7;
  result = (result + bias) >> 3;
  return result;
}


//8
/* 
 * logicalNeg - implement the ! operator, using all of 
 *              the legal operators except !
 *   Examples: logicalNeg(3) = 0, logicalNeg(0) = 1
 *   Legal ops: ~ & ^ | + << >>
 *   Max ops: 12
 *   Rating: 4 
 */
// Logical NOT -> if 0 return 1, else return 0. Whatever the most significant bit is will be preserved during our sign extension. If x was 0 then  sign_ext was a 0, then the shifts would have no effect. Then 0 + 1 at the very end returns 1.
int logicalNeg(int x) {
  int sign_ext;
  int result;
  sign_ext = (x >> 31) | ((~x + 1) >> 31); //Need to shift to a 32-bit for x or -x
  result = sign_ext + 1;
  return result;
}


//9
/* 
 * twosComp2SignMag - Convert from two's complement to sign-magnitude 
 *   where the MSB is the sign bit
 *   You can assume that x > TMin
 *   Example: twosComp2SignMag(-5) = 0x80000005.
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 15
 *   Rating: 4
 */
int twosComp2SignMag(int x) {
  int sign_mask;
  int x_signbit;
  int abs_x;
  int result;
  sign_mask = x >> 31;
  x_signbit = sign_mask << 31;

  abs_x = (x ^ sign_mask) + (1 & sign_mask);
  result = x_signbit | abs_x;
  return result;
}


//10
/*
 * isPower2 - returns 1 if x is a power of 2, and 0 otherwise
 *   Examples: isPower2(5) = 0, isPower2(8) = 1, isPower2(0) = 0
 *   Note that no negative number is a power of 2.
 *   Legal ops: ! ~ & ^ | + << >>
 *   Max ops: 20
 *   Rating: 4
 */
int isPower2(int x) {
  int signbit;
  int zero_check;
  int pw2;
  int result;
  signbit = x >> 31;
  zero_check = !x;
  pw2 = (x + ~0) & x;
  result = !(pw2 | signbit | zero_check);
  return result;
}
